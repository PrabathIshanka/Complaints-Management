{"version":3,"file":"static/js/653.109e11e5.chunk.js","mappings":"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","sources":["Forms/Master/City.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  SearchPanel,\r\n  RequiredRule,\r\n  Popup,\r\n  Lookup,\r\n} from \"devextreme-react/data-grid\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport axios from \"axios\";\r\nimport { confirm } from \"devextreme/ui/dialog\";\r\nimport { connect } from \"react-redux\";\r\nimport notify from \"devextreme/ui/notify\";\r\n\r\nexport class City extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      jCity: [],\r\n      DocReadOnly: false,\r\n    };\r\n\r\n    this.Status = [\r\n      { ID: 1, Name: \"Active\" },\r\n      { ID: 0, Name: \"Inactive\" },\r\n    ];\r\n\r\n    this.Province = [\r\n      { ID: 1, Name: \"Central\" },\r\n      { ID: 2, Name: \"Eastern\" },\r\n      { ID: 3, Name: \"North Central\" },\r\n      { ID: 4, Name: \"Northern\" },\r\n      { ID: 5, Name: \"North Western\" },\r\n      { ID: 6, Name: \"Sabaragamuwa\" },\r\n      { ID: 7, Name: \"Southern\" },\r\n      { ID: 8, Name: \"Uva\" },\r\n      { ID: 9, Name: \"Western\" },\r\n    ];\r\n\r\n    this.ValidationCheck = false;\r\n\r\n    this.onRowInserted = this.onRowInserted.bind(this);\r\n    this.onRowUpdated = this.onRowUpdated.bind(this);\r\n    this.onRowRemoved = this.onRowRemoved.bind(this);\r\n  }\r\n\r\n  componentDidMount = (e) => {\r\n    let auth;\r\n\r\n    axios\r\n      .all([\r\n        axios.get(\"http://20.201.121.161:4478/api/City\", {\r\n          headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") },\r\n        }),\r\n      ])\r\n      .then(\r\n        axios.spread((City) => {\r\n          this.setState({\r\n            jCity: City.data,\r\n          });\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  onRowInserted(e) {\r\n    e.data.id = 0;\r\n    console.log(e.data);\r\n    this.serverRequest = axios\r\n      .post(\"http://20.201.121.161:4478/api/City\", e.data, {\r\n        headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onRowUpdated(e) {\r\n    this.serverRequest = axios\r\n      .put(\"/api/sub-master/update-defect-types\", e.data)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onRowRemoved(e) {\r\n    this.serverRequest = axios\r\n      .delete(`/api/sub-master/remove-defect-types/${e.data.AutoID}`)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onIDValidation = (e) => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\"/api/sub-master/defect-type-exist\", {\r\n          params: {\r\n            AutoID: e.newData.AutoID ? e.newData.AutoID : 0,\r\n            Code: e.newData.MSCode,\r\n            Name: e.newData.MSName,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          resolve(res.data[0].Exist === 1);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  onRowValidating = async (e) => {\r\n    if (e.isValid) {\r\n      if (this.ValidationCheck) {\r\n        e.isValid = true;\r\n        this.ValidationCheck = false;\r\n        return;\r\n      } else e.isValid = false;\r\n\r\n      if (await this.onIDValidation(e)) {\r\n        e.isValid = false;\r\n        this.OnNotification(\"Code or Name already exists\", \"error\");\r\n        return;\r\n      }\r\n\r\n      confirm(\"Want to save this record?\", \"Confirmation\").done(\r\n        (dialogResult) => {\r\n          if (dialogResult) {\r\n            this.ValidationCheck = true;\r\n            e.component.saveEditData();\r\n          } else {\r\n            e.component.cancelEditData();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  onInitNewRow(e) {\r\n    //   e.data.Status = 1;\r\n  }\r\n\r\n  OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <Card title=\"City\">\r\n          <DataGrid\r\n            id=\"grid-defect-types\"\r\n            keyExpr=\"id\"\r\n            dataSource={this.state.jCity}\r\n            allowColumnReordering={true}\r\n            onRowInserted={this.onRowInserted}\r\n            //onRowUpdated={this.onRowUpdated}\r\n            // onRowRemoved={this.onRowRemoved}\r\n            //onRowValidating={this.onRowValidating}\r\n            onInitNewRow={this.onInitNewRow}\r\n            showBorders={true}\r\n            wordWrapEnabled={true}\r\n            allowSearch={true}\r\n            showColumnLines={true}\r\n            showRowLines={false}\r\n            rowAlternationEnabled={true}\r\n          >\r\n            <Editing\r\n              mode=\"popup\"\r\n              useIcons={true}\r\n              allowUpdating={!this.state.DocReadOnly}\r\n              allowDeleting={!this.state.DocReadOnly}\r\n              allowAdding={!this.state.DocReadOnly}\r\n            >\r\n              <Popup title=\"City\" showTitle={true}></Popup>\r\n            </Editing>\r\n            <SearchPanel visible={true} placeholder=\"Search...\" />\r\n            <Column\r\n              dataField=\"id\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            ></Column>\r\n            <Column\r\n              dataField=\"name\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"provinceId\">\r\n              <Lookup\r\n                dataSource={this.Province}\r\n                valueExpr=\"ID\"\r\n                displayExpr=\"Name\"\r\n              />\r\n              <RequiredRule />\r\n            </Column>\r\n          </DataGrid>\r\n        </Card>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state.loggedReducer);\r\n  return {\r\n    data: state.loggedReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(City);\r\n"],"names":["City","Component","constructor","props","super","componentDidMount","e","axios","all","get","headers","Authorization","localStorage","getItem","then","spread","this","setState","jCity","data","catch","error","console","log","onIDValidation","Promise","resolve","reject","params","AutoID","newData","Code","MSCode","Name","MSName","res","Exist","onRowValidating","async","isValid","ValidationCheck","OnNotification","confirm","done","dialogResult","component","saveEditData","cancelEditData","message","type","notify","displayTime","position","at","offset","state","DocReadOnly","Status","ID","Province","onRowInserted","bind","onRowUpdated","onRowRemoved","id","serverRequest","post","response","put","delete","concat","onInitNewRow","render","_jsx","Aux","children","Card","title","_jsxs","DataGrid","keyExpr","dataSource","allowColumnReordering","showBorders","wordWrapEnabled","allowSearch","showColumnLines","showRowLines","rowAlternationEnabled","Editing","mode","useIcons","allowUpdating","allowDeleting","allowAdding","Popup","showTitle","SearchPanel","visible","placeholder","Column","dataField","editorOptions","maxLength","RequiredRule","Lookup","valueExpr","displayExpr","connect","loggedReducer"],"sourceRoot":""}