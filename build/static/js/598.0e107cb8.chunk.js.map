{"version":3,"file":"static/js/598.0e107cb8.chunk.js","mappings":"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","sources":["Forms/Admin/UserGroupList.jsx","Forms/Admin/UserGroup.jsx"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging\r\n} from \"devextreme-react/data-grid\";\r\nimport axios from \"axios\";\r\n\r\nexport class UserGroupList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      SelectID: 0,\r\n      jList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onSelectionChanged = (e) => {\r\n    this.setState({ SelectID: e.selectedRowsData[0].AutoID });\r\n  };\r\n\r\n  onSelectClick = (e) => {\r\n    this.props.OnHide(this.state.SelectID);\r\n  };\r\n\r\n  onCloseClick = (e) => {\r\n    this.props.OnHide(0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          size=\"xl\"\r\n          show={this.props.Show}\r\n          onHide={this.onCloseClick}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>List of User Group</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <DataGrid\r\n              id=\"grid-list\"\r\n              dataSource={this.props.List}\r\n              keyExpr=\"AutoID\"\r\n              showBorders={true}\r\n              wordWrapEnabled={true}\r\n              allowSearch={true}\r\n              selection={{ mode: \"single\" }}\r\n              hoverStateEnabled={true}\r\n              onSelectionChanged={this.onSelectionChanged}\r\n            >\r\n              <SearchPanel visible={true} />\r\n              <GroupPanel visible={true} />\r\n              <Paging defaultPageSize={20} />\r\n              <Column dataField=\"AutoID\" visible={false} />\r\n              <Column dataField=\"GroupCode\" />\r\n              <Column dataField=\"GroupName\" />\r\n            </DataGrid>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <Button variant=\"secondary\" onClick={this.onSelectClick}>\r\n              Open\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.onCloseClick}\r\n              icon=\"feather icon-layers\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserGroupList;\r\n","import React, { Component } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport Form, {\r\n  Item,\r\n  GroupItem,\r\n  RequiredRule,\r\n  Label,\r\n  PatternRule,\r\n} from \"devextreme-react/form\";\r\nimport { Button, Navbar, Nav } from \"react-bootstrap\";\r\nimport List from \"./UserGroupList\";\r\nimport { TreeList, Editing, Column, Lookup } from \"devextreme-react/tree-list\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport { SelectBox, TagBox } from \"devextreme-react\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class UsersGroup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      GroupID: 0,\r\n      Group: { Status: 1 },\r\n      Authorization: [],\r\n\r\n      jlGroupList: [],\r\n\r\n      ListViewing: false,\r\n      DocReadOnly: false,\r\n    };\r\n\r\n    this.Auth = [\r\n      { ID: 0, Name: \"Full Authorization\" },\r\n      { ID: 1, Name: \"Read-Only\" },\r\n      { ID: 2, Name: \"No Authorization\" },\r\n      { ID: 9, Name: \"Various Authorization\" },\r\n    ];\r\n\r\n    this.Status = [\r\n      { ID: 1, Name: \"Active\" },\r\n      { ID: 0, Name: \"Inactive\" },\r\n    ];\r\n\r\n    this.onLoadPanelHiding = this.onLoadPanelHiding.bind(this);\r\n    this.SaveData = this.SaveData.bind(this);\r\n    this.FormRef = React.createRef();\r\n  }\r\n\r\n  get FormLayout() {\r\n    return this.FormRef.current.instance;\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios\r\n      .all([axios.get(\"/api/user-auth-tree\")])\r\n      .then(\r\n        axios.spread((User) => {\r\n          this.setState({\r\n            Authorization: User.data,\r\n            DocReadOnly: false,\r\n          });\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  IDValidation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\"/api/user-group-exist\", {\r\n          params: {\r\n            AutoID: this.state.GroupID,\r\n            Code: this.state.Group.GroupCode,\r\n            Name: this.state.Group.GroupName,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          resolve(res.data[0].Exist === 1);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  OnSaveValidation = async () => {\r\n    if (!this.FormLayout.validate().isValid) {\r\n      this.OnNotification(\"Fields marked with * are required\", \"error\");\r\n      return false;\r\n    } else if (await this.IDValidation()) {\r\n      this.OnNotification(\"Code or Name already exist\", \"error\");\r\n      return false;\r\n    } else return true;\r\n  };\r\n\r\n  onLoadPanelHiding = (message, type) => {\r\n    this.setState({\r\n      LoadPanelVisible: false,\r\n    });\r\n\r\n    this.OnNotification(message, type);\r\n  };\r\n\r\n  OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  OnClickEvent = () => { };\r\n\r\n  SaveData = async () => {\r\n    if (await this.OnSaveValidation()) {\r\n      Swal.fire({\r\n        type: \"info\",\r\n        showCancelButton: true,\r\n        text: \"Do you want to save ?\",\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n      }).then((res) => {\r\n        if (res.value) {\r\n          this.setState(\r\n            { LoadPanelVisible: true },\r\n            () =>\r\n            (this.serverRequest = axios\r\n              .post(\"/api/user-group\", {\r\n                GroupID: this.state.GroupID,\r\n                UserGroup: JSON.stringify(this.state.Group),\r\n                Authorization: JSON.stringify(this.state.Authorization),\r\n              })\r\n              .then((response) => {\r\n                this.onLoadPanelHiding(\"Successfully Saved\", \"success\");\r\n                this.OnClearForm();\r\n              })\r\n              .catch((error) => {\r\n                this.onLoadPanelHiding(\"Something went wrong\", \"error\");\r\n                console.log(error);\r\n              }))\r\n          );\r\n        } else if (res.dismiss == \"cancel\") {\r\n          //console.log(\"cancel\");\r\n        } else if (res.dismiss == \"esc\") {\r\n          //console.log(\"cancel\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  OnClearForm = () => {\r\n    let auth = this.state.Authorization;\r\n\r\n    auth = auth.map((el) => (el.Auth !== 2 ? { ...el, Auth: 2 } : el));\r\n\r\n    this.setState({\r\n      GroupID: 0,\r\n      Group: { Status: 1 },\r\n      Authorization: auth,\r\n    });\r\n  };\r\n\r\n  OnListClickEvent = (SelectID) => {\r\n    this.setState({ ListViewing: !this.state.ListViewing }, () => {\r\n      if (this.state.ListViewing) {\r\n        //Open\r\n        this.serverRequest = axios\r\n          .get(\"/api/user-group-lookup\")\r\n          .then((res) => {\r\n            console.log(res.data);\r\n            this.setState({ jlGroupList: JSON.parse(res.data[0].List) });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n      if (!this.state.ListViewing && SelectID != 0) {\r\n        //Close\r\n        this.setState({ GroupID: SelectID }, () => this.OnLoadData());\r\n      }\r\n    });\r\n  };\r\n\r\n  OnLoadData() {\r\n    axios\r\n      .all([\r\n        axios.get(\"/api/user-group\", {\r\n          params: { GroupID: this.state.GroupID },\r\n        }),\r\n      ])\r\n      .then(\r\n        axios.spread((People) => {\r\n          console.log(\"data view\", People);\r\n          this.setState({\r\n            Group: JSON.parse(People.data[0].UserGroup),\r\n            Authorization: JSON.parse(People.data[0].UserWiseAuthontication),\r\n          });\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  onRowUpdating = (e) => {\r\n    if (e.newData.Auth === 9) {\r\n      e.cancel = true;\r\n    }\r\n  };\r\n\r\n  onRowUpdated = (e) => {\r\n    let auth = this.state.Authorization;\r\n\r\n    if (e.data.Type === 1) {\r\n      auth = auth.map((el) =>\r\n        el.RootParent === e.data.MenuID || el.ParentID === e.data.MenuID\r\n          ? { ...el, Auth: e.data.Auth }\r\n          : el\r\n      );\r\n    } else {\r\n      let allParentCount = auth.filter(\r\n        (item) => item.ParentID === e.data.ParentID\r\n      );\r\n      let typeParentCount = auth.filter(\r\n        (item) => item.ParentID === e.data.ParentID && item.Auth === e.data.Auth\r\n      );\r\n\r\n      if (allParentCount.length === typeParentCount.length)\r\n        auth = auth.map((el) =>\r\n          el.MenuID === e.data.ParentID ? { ...el, Auth: e.data.Auth } : el\r\n        );\r\n      else\r\n        auth = auth.map((el) =>\r\n          el.MenuID === e.data.ParentID ? { ...el, Auth: 9 } : el\r\n        );\r\n\r\n      //////////////////////////\r\n\r\n      let allRootCount = auth.filter(\r\n        (item) => item.RootParent === e.data.RootParent\r\n      );\r\n      let typeRootCount = auth.filter(\r\n        (item) =>\r\n          item.RootParent === e.data.RootParent && item.Auth === e.data.Auth\r\n      );\r\n\r\n      if (allRootCount.length === typeRootCount.length)\r\n        auth = auth.map((el) =>\r\n          el.MenuID === e.data.RootParent ? { ...el, Auth: e.data.Auth } : el\r\n        );\r\n      else\r\n        auth = auth.map((el) =>\r\n          el.MenuID === e.data.RootParent ? { ...el, Auth: 9 } : el\r\n        );\r\n    }\r\n    this.setState({ Authorization: auth });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <Card title=\"User\">\r\n          <Form ref={this.FormRef} formData={this.state.Group}>\r\n            <GroupItem caption=\"User Information\" colCount={2}>\r\n              <Item\r\n                dataField=\"GroupCode\"\r\n                editorOptions={{\r\n                  maxLength: 50,\r\n                  readOnly: this.state.GroupID != 0,\r\n                }}\r\n              >\r\n                <RequiredRule message=\"Field required\" />\r\n                <Label text=\"Group Code\"></Label>\r\n              </Item>\r\n              <Item\r\n                dataField=\"GroupName\"\r\n                editorOptions={{\r\n                  maxLength: 100,\r\n                }}\r\n              >\r\n                <RequiredRule message=\"Field required\" />\r\n              </Item>\r\n\r\n              <Item\r\n                dataField=\"Status\"\r\n                editorType=\"dxSelectBox\"\r\n                editorOptions={{\r\n                  searchEnabled: true,\r\n                  items: this.Status,\r\n                  displayExpr: \"Name\",\r\n                  valueExpr: \"ID\",\r\n                }}\r\n              >\r\n                <RequiredRule></RequiredRule>\r\n              </Item>\r\n            </GroupItem>\r\n          </Form>\r\n        </Card>\r\n\r\n        <Card title=\"Authorization\">\r\n          <TreeList\r\n            id=\"user-authorization\"\r\n            dataSource={this.state.Authorization}\r\n            columnAutoWidth={true}\r\n            wordWrapEnabled={true}\r\n            showBorders={true}\r\n            keyExpr=\"MenuID\"\r\n            parentIdExpr=\"ParentID\"\r\n            onRowUpdated={this.onRowUpdated}\r\n            onRowUpdating={this.onRowUpdating}\r\n          >\r\n            <Editing allowUpdating={true} mode=\"cell\" />\r\n            <Column\r\n              minWidth={250}\r\n              dataField=\"Name\"\r\n              caption=\"Module\"\r\n              allowEditing={false}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column minWidth={120} dataField=\"Auth\" caption=\"Authorization\">\r\n              <Lookup\r\n                dataSource={this.Auth}\r\n                valueExpr=\"ID\"\r\n                displayExpr=\"Name\"\r\n              />\r\n              <RequiredRule />\r\n            </Column>\r\n          </TreeList>\r\n        </Card>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={this.SaveData}\r\n            disabled={this.state.DocReadOnly}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={this.OnClearForm}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={this.OnListClickEvent}\r\n          >\r\n            View List\r\n          </Button>\r\n        </Navbar>\r\n\r\n        <LoadPanel\r\n          message=\"Processing.... Please, wait...\"\r\n          shadingColor=\"rgba(0,0,0,0.4)\"\r\n          onHiding={this.onLoadPanelHiding}\r\n          visible={this.state.LoadPanelVisible}\r\n          showIndicator={true}\r\n          shading={true}\r\n          showPane={true}\r\n          closeOnOutsideClick={false}\r\n          width={500}\r\n        />\r\n\r\n        <List\r\n          Show={this.state.ListViewing}\r\n          OnHide={this.OnListClickEvent}\r\n          List={this.state.jlGroupList}\r\n        ></List>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state.loggedReducer);\r\n  return {\r\n    data: state.loggedReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UsersGroup);\r\n\r\n// export default Users;\r\n"],"names":["UserGroupList","Component","constructor","props","super","onSelectionChanged","e","this","setState","SelectID","selectedRowsData","AutoID","onSelectClick","OnHide","state","onCloseClick","jList","componentDidMount","render","_jsx","Fragment","children","_jsxs","Modal","size","show","Show","onHide","backdrop","keyboard","Header","closeButton","Title","Body","DataGrid","id","dataSource","List","keyExpr","showBorders","wordWrapEnabled","allowSearch","selection","mode","hoverStateEnabled","SearchPanel","visible","GroupPanel","Paging","defaultPageSize","Column","dataField","Button","variant","onClick","icon","UsersGroup","IDValidation","Promise","resolve","reject","axios","get","params","GroupID","Code","Group","GroupCode","Name","GroupName","then","res","data","Exist","catch","error","console","log","OnSaveValidation","async","FormLayout","validate","isValid","OnNotification","onLoadPanelHiding","message","type","LoadPanelVisible","notify","displayTime","position","at","offset","OnClickEvent","SaveData","Swal","showCancelButton","text","confirmButtonText","cancelButtonText","allowOutsideClick","allowEscapeKey","value","serverRequest","post","UserGroup","JSON","stringify","Authorization","response","OnClearForm","dismiss","auth","map","el","Auth","Status","OnListClickEvent","ListViewing","jlGroupList","parse","OnLoadData","onRowUpdating","newData","cancel","onRowUpdated","Type","RootParent","MenuID","ParentID","allParentCount","filter","item","typeParentCount","length","allRootCount","typeRootCount","DocReadOnly","ID","bind","FormRef","React","current","instance","all","spread","User","People","UserWiseAuthontication","Aux","Card","title","Form","ref","formData","GroupItem","caption","colCount","Item","editorOptions","maxLength","readOnly","RequiredRule","Label","editorType","searchEnabled","items","displayExpr","valueExpr","TreeList","columnAutoWidth","parentIdExpr","Editing","allowUpdating","minWidth","allowEditing","Lookup","Navbar","bg","disabled","LoadPanel","shadingColor","onHiding","showIndicator","shading","showPane","closeOnOutsideClick","width","connect","loggedReducer"],"sourceRoot":""}