{"version":3,"file":"static/js/490.a8e1f759.chunk.js","mappings":"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","sources":["Forms/Master/Branch.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  SearchPanel,\r\n  RequiredRule,\r\n  Popup,\r\n  Lookup,\r\n} from \"devextreme-react/data-grid\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport axios from \"axios\";\r\nimport { confirm } from \"devextreme/ui/dialog\";\r\nimport { connect } from \"react-redux\";\r\nimport notify from \"devextreme/ui/notify\";\r\n\r\nexport class Branch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      jBranch: [],\r\n      jCity: [],\r\n      DocReadOnly: false,\r\n    };\r\n\r\n    this.Status = [\r\n      { ID: 1, Name: \"Active\" },\r\n      { ID: 0, Name: \"Inactive\" },\r\n    ];\r\n    this.Institute = [\r\n      { ID: 0, Name: \"Wildlife conservations\" },\r\n      { ID: 1, Name: \"Forest conservations\" },\r\n    ];\r\n\r\n    this.ValidationCheck = false;\r\n\r\n    this.onRowInserted = this.onRowInserted.bind(this);\r\n    this.onRowUpdated = this.onRowUpdated.bind(this);\r\n    this.onRowRemoved = this.onRowRemoved.bind(this);\r\n  }\r\n\r\n  componentDidMount = (e) => {\r\n    let auth;\r\n\r\n    axios\r\n      .all([\r\n        axios.get(\"http://20.201.121.161:4478/api/Branch\", {\r\n          headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") },\r\n        }),\r\n        axios.get(\"http://20.201.121.161:4478/api/City\", {\r\n          headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") },\r\n        }),\r\n      ])\r\n      .then(\r\n        axios.spread((Branch, City) => {\r\n          this.setState({\r\n            jBranch: Branch.data,\r\n            jCity: City.data,\r\n          });\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  onRowInserted(e) {\r\n    e.data.id = 0;\r\n    console.log(e.data);\r\n\r\n    this.serverRequest = axios\r\n      .post(\"http://20.201.121.161:4478/api/Branch\", e.data, {\r\n        headers: { Authorization: \"Bearer \" + localStorage.getItem(\"token\") },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onRowUpdated(e) {\r\n    this.serverRequest = axios\r\n      .put(\"/api/sub-master/update-defect-types\", e.data)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onRowRemoved(e) {\r\n    this.serverRequest = axios\r\n      .delete(`/api/sub-master/remove-defect-types/${e.data.AutoID}`)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onIDValidation = (e) => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\"/api/sub-master/defect-type-exist\", {\r\n          params: {\r\n            AutoID: e.newData.AutoID ? e.newData.AutoID : 0,\r\n            Code: e.newData.MSCode,\r\n            Name: e.newData.MSName,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          resolve(res.data[0].Exist === 1);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  onRowValidating = async (e) => {\r\n    if (e.isValid) {\r\n      if (this.ValidationCheck) {\r\n        e.isValid = true;\r\n        this.ValidationCheck = false;\r\n        return;\r\n      } else e.isValid = false;\r\n\r\n      if (await this.onIDValidation(e)) {\r\n        e.isValid = false;\r\n        this.OnNotification(\"Code or Name already exists\", \"error\");\r\n        return;\r\n      }\r\n\r\n      confirm(\"Want to save this record?\", \"Confirmation\").done(\r\n        (dialogResult) => {\r\n          if (dialogResult) {\r\n            this.ValidationCheck = true;\r\n            e.component.saveEditData();\r\n          } else {\r\n            e.component.cancelEditData();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  onInitNewRow(e) {\r\n    // e.data.Status = 1;\r\n  }\r\n\r\n  OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <Card title=\"Branch\">\r\n          <DataGrid\r\n            id=\"grid-defect-types\"\r\n            keyExpr=\"id\"\r\n            dataSource={this.state.jBranch}\r\n            allowColumnReordering={true}\r\n            onRowInserted={this.onRowInserted}\r\n            //onRowUpdated={this.onRowUpdated}\r\n            // onRowRemoved={this.onRowRemoved}\r\n            // onRowValidating={this.onRowValidating}\r\n            onInitNewRow={this.onInitNewRow}\r\n            showBorders={true}\r\n            wordWrapEnabled={true}\r\n            allowSearch={true}\r\n            showColumnLines={true}\r\n            showRowLines={false}\r\n            rowAlternationEnabled={true}\r\n          >\r\n            <Editing\r\n              mode=\"popup\"\r\n              useIcons={true}\r\n              allowUpdating={!this.state.DocReadOnly}\r\n              allowDeleting={false}\r\n              allowAdding={!this.state.DocReadOnly}\r\n            >\r\n              <Popup title=\"Branch\" showTitle={true}></Popup>\r\n            </Editing>\r\n            <SearchPanel visible={true} placeholder=\"Search...\" />\r\n            <Column\r\n              dataField=\"id\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            ></Column>\r\n            <Column\r\n              dataField=\"name\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column\r\n              dataField=\"address\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column\r\n              dataField=\"phoneNumber\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column\r\n              dataField=\"emailAddress\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"cityId\">\r\n              <Lookup\r\n                dataSource={this.state.jCity}\r\n                valueExpr=\"id\"\r\n                displayExpr=\"name\"\r\n              />\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"institutionId\">\r\n              <Lookup\r\n                dataSource={this.Institute}\r\n                valueExpr=\"ID\"\r\n                displayExpr=\"Name\"\r\n              />\r\n              <RequiredRule />\r\n            </Column>\r\n          </DataGrid>\r\n        </Card>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state.loggedReducer);\r\n  return {\r\n    data: state.loggedReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Branch);\r\n"],"names":["Branch","Component","constructor","props","super","componentDidMount","e","axios","all","get","headers","Authorization","localStorage","getItem","then","spread","City","this","setState","jBranch","data","jCity","catch","error","console","log","onIDValidation","Promise","resolve","reject","params","AutoID","newData","Code","MSCode","Name","MSName","res","Exist","onRowValidating","async","isValid","ValidationCheck","OnNotification","confirm","done","dialogResult","component","saveEditData","cancelEditData","message","type","notify","displayTime","position","at","offset","state","DocReadOnly","Status","ID","Institute","onRowInserted","bind","onRowUpdated","onRowRemoved","id","serverRequest","post","response","put","delete","concat","onInitNewRow","render","_jsx","Aux","children","Card","title","_jsxs","DataGrid","keyExpr","dataSource","allowColumnReordering","showBorders","wordWrapEnabled","allowSearch","showColumnLines","showRowLines","rowAlternationEnabled","Editing","mode","useIcons","allowUpdating","allowDeleting","allowAdding","Popup","showTitle","SearchPanel","visible","placeholder","Column","dataField","editorOptions","maxLength","RequiredRule","Lookup","valueExpr","displayExpr","connect","loggedReducer"],"sourceRoot":""}