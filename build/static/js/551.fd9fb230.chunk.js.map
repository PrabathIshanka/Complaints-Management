{"version":3,"file":"static/js/551.fd9fb230.chunk.js","mappings":"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","sources":["Forms/Admin/PasswordReset.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Form, { Item, Label, RequiredRule } from \"devextreme-react/form\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  Popup,\r\n  Lookup,\r\n  Scrolling,\r\n  Paging,\r\n  Selection,\r\n  SearchPanel,\r\n} from \"devextreme-react/data-grid\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar, Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport Layout from \"../../component/Report/ReportList\";\r\nimport { connect } from \"react-redux\";\r\nimport Moment from \"moment\";\r\nimport DropDownBox from \"devextreme-react/drop-down-box\";\r\n\r\nexport class PasswordRest extends Component {\r\n  _isMounted = false;\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      jPasswordReset: {},\r\n    };\r\n\r\n    this.FormRef = React.createRef();\r\n  }\r\n\r\n  OnClickEvent = (e) => {\r\n    if (this.FormLayout.validate().isValid == true) {\r\n      axios\r\n        .get(\"/api/password-check\", {\r\n          params: {\r\n            CurrentPassword: this.state.jPasswordReset.CurrentPassword,\r\n            UserID:\r\n              this.props.data.user === undefined\r\n                ? this.props.data.data.user.Id\r\n                : this.props.data.user.Id,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.length > 0) {\r\n            if (\r\n              this.state.jPasswordReset.ConfirmPassword ==\r\n              this.state.jPasswordReset.NewPassword\r\n            ) {\r\n              Swal.fire({\r\n                type: \"info\",\r\n                showCancelButton: true,\r\n                text: \"Do you want to reset your password ?\",\r\n                confirmButtonText: \"Yes\",\r\n                cancelButtonText: \"No\",\r\n                allowOutsideClick: false,\r\n                allowEscapeKey: false,\r\n              }).then((res) => {\r\n                if (res.value) {\r\n                  axios\r\n                    .post(\"/api/password-check\", {\r\n                      NewPassword: this.state.jPasswordReset.NewPassword,\r\n                      UserID:\r\n                        this.props.data.user === undefined\r\n                          ? this.props.data.data.user.Id\r\n                          : this.props.data.user.Id,\r\n                    })\r\n                    .then((res) => {\r\n                      notify({\r\n                        message: \"Password Reset Successfully Completed\",\r\n                        type: \"success\",\r\n                        displayTime: 3000,\r\n                        position: { at: \"top right\", offset: \"50\" },\r\n                      });\r\n                      this.OnClearClickEvent();\r\n                    })\r\n                    .catch((error) => {\r\n                      console.log(error);\r\n                    });\r\n                } else if (res.dismiss == \"cancel\") {\r\n                  //console.log(\"cancel\");\r\n                } else if (res.dismiss == \"esc\") {\r\n                  //console.log(\"cancle\");\r\n                }\r\n              });\r\n            } else {\r\n              notify({\r\n                message: \"Password Not is Match\",\r\n                type: \"error\",\r\n                displayTime: 3000,\r\n                position: { at: \"top right\", offset: \"50\" },\r\n              });\r\n            }\r\n          } else {\r\n            notify({\r\n              message: \"Current Password Not is Match\",\r\n              type: \"error\",\r\n              displayTime: 3000,\r\n              position: { at: \"top right\", offset: \"50\" },\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      notify({\r\n        message: \"Fields marked with * are required\",\r\n        type: \"error\",\r\n        displayTime: 3000,\r\n        position: { at: \"top right\", offset: \"50\" },\r\n      });\r\n    }\r\n  };\r\n\r\n  OnClearForm = () => {\r\n    this.setState({\r\n      jPasswordReset: {},\r\n    });\r\n\r\n    this.componentDidMount();\r\n  };\r\n\r\n  onLoadPanelHiding = () => {\r\n    this.setState({\r\n      LoadPanelVisible: false,\r\n    });\r\n\r\n    notify({\r\n      message: \"Successfully Saved\",\r\n      type: \"success\",\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  clearRelatedGrid() {\r\n    this.setState({\r\n      jPasswordReset: {},\r\n    });\r\n  }\r\n\r\n  OnClearClickEvent = () => {\r\n    this.setState({ jPasswordReset: {} });\r\n  };\r\n\r\n  get FormLayout() {\r\n    return this.FormRef.current.instance;\r\n  }\r\n\r\n  OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <Card title=\"Password Reset\">\r\n          <Form ref={this.FormRef} formData={this.state.jPasswordReset}>\r\n            <Item\r\n              dataField=\"CurrentPassword\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n                mode: \"password\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Item>\r\n            <Item\r\n              dataField=\"NewPassword\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n                mode: \"password\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Item>\r\n            <Item\r\n              dataField=\"ConfirmPassword\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n                mode: \"password\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n            </Item>\r\n          </Form>\r\n        </Card>\r\n\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={this.OnClickEvent}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={this.OnClearForm}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </Navbar>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\n// export default ExamSetup;\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.loggedReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PasswordRest);\r\n"],"names":["PasswordRest","Component","constructor","props","super","_isMounted","OnClickEvent","e","this","FormLayout","validate","isValid","axios","get","params","CurrentPassword","state","jPasswordReset","UserID","undefined","data","user","Id","then","res","length","ConfirmPassword","NewPassword","Swal","type","showCancelButton","text","confirmButtonText","cancelButtonText","allowOutsideClick","allowEscapeKey","value","post","notify","message","displayTime","position","at","offset","OnClearClickEvent","catch","error","console","log","dismiss","OnClearForm","setState","componentDidMount","onLoadPanelHiding","LoadPanelVisible","OnNotification","FormRef","React","clearRelatedGrid","current","instance","render","_jsxs","Aux","children","_jsx","Card","title","Form","ref","formData","Item","dataField","editorOptions","maxLength","mode","RequiredRule","Navbar","bg","variant","Button","icon","onClick","connect","loggedReducer"],"sourceRoot":""}